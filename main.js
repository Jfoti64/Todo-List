(()=>{"use strict";var n={208:(n,t,e)=>{e.d(t,{A:()=>A});var r=e(354),a=e.n(r),o=e(314),i=e.n(o),s=e(417),c=e.n(s),d=new URL(e(239),e.b),u=i()(a()),l=c()(d);u.push([n.id,`:root {\n    --taskColor: rgba(255, 255, 255, 0.484);\n    --panelColor: #eeeeee;\n  }\n\nhtml {\n    height: 100%;\n}\n\nheader {\n    display: grid;\n    grid-template-columns: 80px 1fr;\n}\n\nheader img, header h1 {\n    margin: 0px;\n    align-self: center;\n}\n\nbody {\n    font-family: 'Roboto', sans-serif;\n    display: grid;\n    height: 100vh;\n    grid-template-rows: 80px 1fr 50px;\n    margin: 0;\n}\n\n#gridContainer {\n    padding: 0px 48px;\n}\n\nbody::before {\n    content: '';\n    display: block;\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    z-index: -1;\n    background-image: url(${l});\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    filter: blur(8px); /* Adjust the px value to increase or decrease the amount of blur */\n}\n\n#projectsPanel {\n    background-color: var(--panelColor);\n}\n\n#taskEditPanel {\n    background-color: var(--panelColor);\n}\n\n#hamburgerMenu {\n    width: 60px;\n    height: 60px;\n}\n\nh3 {\n    font-size: 3rem;\n}\n\n.taskCard h5 {\n    font-size: 20px;\n    text-wrap: wrap;\n    overflow: auto;\n    padding: 4px 0px;    \n}\n\n.taskCard h5, .taskCard p {\n    margin: 0px;\n    align-self: center;\n}\n\n.taskCard p, #currentDate {\n    font-size: 18px;\n}\n\n#currentDate {\n    font-weight: 1000;\n}\n\n#currentTasks {\n    display: grid;\n    gap: 20px;\n    padding: 30px;\n}\n\n#currentTasks > h2, #currentTasks > p {\n    margin: 0px;\n}\n\n.taskCard {\n    height: 90px;\n    display: grid;\n    grid-template-columns: 45px 150px 1fr;\n    grid-template-rows: repeat(2, 1fr);\n    border-radius: 8px;\n    background-color: var(--taskColor)\n    \n}\n\n.taskCard:hover, #hamburgerMenu:hover {\n    background-color: rgba(255, 255, 255, 0.584);\n}\n\n.important {\n    border: 2px solid gold;\n}\n\n#hamburgerMenu {\n    border-radius: 8px;\n}\n\n.completionStatus {\n    grid-row: 1 / -1;\n}\n\n.grayed-out-text {\n    color: #808080;\n}\n\n/* Hide the default checkbox */\n.completionStatus {\n    appearance: none;\n    width: 25px;\n    height: 25px;\n    border: 2px solid #000000; /* Border color */\n    border-radius: 50%; /* Round shape */\n    cursor: pointer;\n    background: white; /* Background of the checkbox */\n    place-self: center;\n  }\n  \n  /* Style for when the checkbox is checked */\n  .completionStatus:checked {\n    background-color: #023e8a; /* Background color when checked */\n  }\n\n.projectLabel, .dueDate {\n    grid-row: 2;\n}\n\n.title {\n    grid-row: 1;\n    grid-column: 2 / -1;\n}\n\n.importantIcon {\n    width: 30px;\n    height: 30px;\n}\n\n#addTaskDiv {\n    display: grid;\n    grid-template-columns: 25px 1fr;\n    height: 90px;\n}\n\n#addTaskInput {\n    grid-column: 1 / 3;\n    width: 100%;\n    height: 50px;\n    border-radius: 8px;\n    background-color: var(--taskColor);\n    border: none;\n    font-size: 20px;\n}\n\n.task-edit-panel {\n    position: fixed;\n    top: 0;\n    right: -100%; /* Start off-screen */\n    width: 375px; /* Or any desired width */\n    height: 100%;\n\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,.4), 0 6px 20px 0 rgba(0,0,0,.4);\n    transition: right 0.5s; /* Smooth slide-in effect */\n    padding: 20px;\n}\n\n/* Class to slide in the panel */\n.task-edit-panel.open {\n    right: 0;\n}\n\n.projects-panel {\n    position: fixed;\n    top: 0;\n    left: -100%; /* Start off-screen */\n    width: 375px; /* Or any desired width */\n    height: 100%;\n    overflow: auto;\n\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,.4), 0 6px 20px 0 rgba(0,0,0,.4);\n    transition: left 0.5s; /* Corrected transition property */\n    padding: 20px;\n}\n\n.projects-panel.open {\n    left: 0;\n}\n\nfooter {\n    text-align: center;\n}\n\n.projects-panel {\n    background: #ffffff; /* White background */\n    box-shadow: -2px 0 5px rgba(0,0,0,0.2); /* Shadow to the left */\n    padding: 15px;\n    box-sizing: border-box;\n    overflow-y: auto; /* Allows scrolling */\n    display: flex;\n    flex-direction: column;\n  }\n  \n  #projectsPanelTop button {\n    background: none;\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n  }\n  \n  #projectsPanelTop button:hover {\n    background-color: #d7d5d5;\n  }\n  \n  #projectsPanelBottom {\n    flex-grow: 1; /* Take up remaining space */\n  }\n  \n  #projectsPanelBottom h2 {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n  \n  .projectCard {\n    background: #f2f2f2;\n    border: none;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  .projectCard:hover {\n    background-color: #d7d5d5;\n  }\n  \n  #addProject {\n    margin-top: 10px;\n    text-align: center;\n  }\n\n  #addProject input{\n    text-align: center;\n    padding: 10px 0px;\n  }\n  \n  #addProjectInput {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 16px;\n  }\n\n.task-edit-panel {\n    background: #ffffff; /* White background for the edit panel */\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n    padding: 20px;\n    box-sizing: border-box; /* Include padding in the width and height */\n    overflow-y: auto; /* Allow scrolling for overflow content */\n  }\n  \n  .task-edit-panel input[type="text"],\n  .task-edit-panel input[type="date"],\n  .task-edit-panel input[type="checkbox"],\n  .task-edit-panel button {\n    width: 100%; /* Full width */\n    margin-bottom: 15px; /* Spacing between elements */\n    border: 1px solid #ccc; /* Subtle border */\n    border-radius: 5px; /* Slightly rounded corners */\n    padding: 10px; /* Comfortable padding inside inputs and button */\n    box-sizing: border-box; /* Include padding in the width */\n  }\n  \n  .task-edit-panel input[type="text"],\n  .task-edit-panel input[type="date"] {\n    font-size: 16px; /* Readable font size */\n  }\n  \n  .task-edit-panel input[type="checkbox"] {\n    transform: scale(1.5); /* Larger checkbox for easy interaction */\n    margin-right: 10px; /* Space before the label */\n    vertical-align: middle; /* Align with the text */\n  }\n  \n  .task-edit-panel label {\n    display: block; /* Full width */\n    margin-bottom: 5px; /* Space above inputs */\n    font-weight: bold; /* Bold label text */\n  }\n  \n  .task-edit-panel button {\n    background: #007bff; /* Bootstrap primary button color */\n    color: #ffffff; /* White text */\n    font-weight: bold; /* Bold button text */\n    border: none; /* No border */\n    cursor: pointer; /* Pointer cursor on hover */\n    transition: background-color 0.3s ease; /* Smooth background transition */\n  }\n  \n  .task-edit-panel button:hover {\n    background: #0056b3;\n  }\n  \n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --taskColor: rgba(255, 255, 255, 0.484);\n    --panelColor: #eeeeee;\n  }\n\nhtml {\n    height: 100%;\n}\n\nheader {\n    display: grid;\n    grid-template-columns: 80px 1fr;\n}\n\nheader img, header h1 {\n    margin: 0px;\n    align-self: center;\n}\n\nbody {\n    font-family: \'Roboto\', sans-serif;\n    display: grid;\n    height: 100vh;\n    grid-template-rows: 80px 1fr 50px;\n    margin: 0;\n}\n\n#gridContainer {\n    padding: 0px 48px;\n}\n\nbody::before {\n    content: \'\';\n    display: block;\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    z-index: -1;\n    background-image: url(\'./images/yuriy-kovalev-nN1HSDtKdlw-unsplash.jpg\');\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    filter: blur(8px); /* Adjust the px value to increase or decrease the amount of blur */\n}\n\n#projectsPanel {\n    background-color: var(--panelColor);\n}\n\n#taskEditPanel {\n    background-color: var(--panelColor);\n}\n\n#hamburgerMenu {\n    width: 60px;\n    height: 60px;\n}\n\nh3 {\n    font-size: 3rem;\n}\n\n.taskCard h5 {\n    font-size: 20px;\n    text-wrap: wrap;\n    overflow: auto;\n    padding: 4px 0px;    \n}\n\n.taskCard h5, .taskCard p {\n    margin: 0px;\n    align-self: center;\n}\n\n.taskCard p, #currentDate {\n    font-size: 18px;\n}\n\n#currentDate {\n    font-weight: 1000;\n}\n\n#currentTasks {\n    display: grid;\n    gap: 20px;\n    padding: 30px;\n}\n\n#currentTasks > h2, #currentTasks > p {\n    margin: 0px;\n}\n\n.taskCard {\n    height: 90px;\n    display: grid;\n    grid-template-columns: 45px 150px 1fr;\n    grid-template-rows: repeat(2, 1fr);\n    border-radius: 8px;\n    background-color: var(--taskColor)\n    \n}\n\n.taskCard:hover, #hamburgerMenu:hover {\n    background-color: rgba(255, 255, 255, 0.584);\n}\n\n.important {\n    border: 2px solid gold;\n}\n\n#hamburgerMenu {\n    border-radius: 8px;\n}\n\n.completionStatus {\n    grid-row: 1 / -1;\n}\n\n.grayed-out-text {\n    color: #808080;\n}\n\n/* Hide the default checkbox */\n.completionStatus {\n    appearance: none;\n    width: 25px;\n    height: 25px;\n    border: 2px solid #000000; /* Border color */\n    border-radius: 50%; /* Round shape */\n    cursor: pointer;\n    background: white; /* Background of the checkbox */\n    place-self: center;\n  }\n  \n  /* Style for when the checkbox is checked */\n  .completionStatus:checked {\n    background-color: #023e8a; /* Background color when checked */\n  }\n\n.projectLabel, .dueDate {\n    grid-row: 2;\n}\n\n.title {\n    grid-row: 1;\n    grid-column: 2 / -1;\n}\n\n.importantIcon {\n    width: 30px;\n    height: 30px;\n}\n\n#addTaskDiv {\n    display: grid;\n    grid-template-columns: 25px 1fr;\n    height: 90px;\n}\n\n#addTaskInput {\n    grid-column: 1 / 3;\n    width: 100%;\n    height: 50px;\n    border-radius: 8px;\n    background-color: var(--taskColor);\n    border: none;\n    font-size: 20px;\n}\n\n.task-edit-panel {\n    position: fixed;\n    top: 0;\n    right: -100%; /* Start off-screen */\n    width: 375px; /* Or any desired width */\n    height: 100%;\n\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,.4), 0 6px 20px 0 rgba(0,0,0,.4);\n    transition: right 0.5s; /* Smooth slide-in effect */\n    padding: 20px;\n}\n\n/* Class to slide in the panel */\n.task-edit-panel.open {\n    right: 0;\n}\n\n.projects-panel {\n    position: fixed;\n    top: 0;\n    left: -100%; /* Start off-screen */\n    width: 375px; /* Or any desired width */\n    height: 100%;\n    overflow: auto;\n\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,.4), 0 6px 20px 0 rgba(0,0,0,.4);\n    transition: left 0.5s; /* Corrected transition property */\n    padding: 20px;\n}\n\n.projects-panel.open {\n    left: 0;\n}\n\nfooter {\n    text-align: center;\n}\n\n.projects-panel {\n    background: #ffffff; /* White background */\n    box-shadow: -2px 0 5px rgba(0,0,0,0.2); /* Shadow to the left */\n    padding: 15px;\n    box-sizing: border-box;\n    overflow-y: auto; /* Allows scrolling */\n    display: flex;\n    flex-direction: column;\n  }\n  \n  #projectsPanelTop button {\n    background: none;\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n  }\n  \n  #projectsPanelTop button:hover {\n    background-color: #d7d5d5;\n  }\n  \n  #projectsPanelBottom {\n    flex-grow: 1; /* Take up remaining space */\n  }\n  \n  #projectsPanelBottom h2 {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n  \n  .projectCard {\n    background: #f2f2f2;\n    border: none;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  .projectCard:hover {\n    background-color: #d7d5d5;\n  }\n  \n  #addProject {\n    margin-top: 10px;\n    text-align: center;\n  }\n\n  #addProject input{\n    text-align: center;\n    padding: 10px 0px;\n  }\n  \n  #addProjectInput {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 16px;\n  }\n\n.task-edit-panel {\n    background: #ffffff; /* White background for the edit panel */\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n    padding: 20px;\n    box-sizing: border-box; /* Include padding in the width and height */\n    overflow-y: auto; /* Allow scrolling for overflow content */\n  }\n  \n  .task-edit-panel input[type="text"],\n  .task-edit-panel input[type="date"],\n  .task-edit-panel input[type="checkbox"],\n  .task-edit-panel button {\n    width: 100%; /* Full width */\n    margin-bottom: 15px; /* Spacing between elements */\n    border: 1px solid #ccc; /* Subtle border */\n    border-radius: 5px; /* Slightly rounded corners */\n    padding: 10px; /* Comfortable padding inside inputs and button */\n    box-sizing: border-box; /* Include padding in the width */\n  }\n  \n  .task-edit-panel input[type="text"],\n  .task-edit-panel input[type="date"] {\n    font-size: 16px; /* Readable font size */\n  }\n  \n  .task-edit-panel input[type="checkbox"] {\n    transform: scale(1.5); /* Larger checkbox for easy interaction */\n    margin-right: 10px; /* Space before the label */\n    vertical-align: middle; /* Align with the text */\n  }\n  \n  .task-edit-panel label {\n    display: block; /* Full width */\n    margin-bottom: 5px; /* Space above inputs */\n    font-weight: bold; /* Bold label text */\n  }\n  \n  .task-edit-panel button {\n    background: #007bff; /* Bootstrap primary button color */\n    color: #ffffff; /* White text */\n    font-weight: bold; /* Bold button text */\n    border: none; /* No border */\n    cursor: pointer; /* Pointer cursor on hover */\n    transition: background-color 0.3s ease; /* Smooth background transition */\n  }\n  \n  .task-edit-panel button:hover {\n    background: #0056b3;\n  }\n  \n'],sourceRoot:""}]);const A=u},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var u=[].concat(n[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},417:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var A=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var h=a(p,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);t[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var u=e(o[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},659:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},239:(n,t,e)=>{n.exports=e.p+"836fbf3669b061b882c0.jpg"}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&(!n||!/^http(s?):/.test(n));)n=r[a--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{var n=e(72),t=e.n(n),r=e(825),a=e.n(r),o=e(659),i=e.n(o),s=e(56),c=e.n(s),d=e(540),u=e.n(d),l=e(113),A=e.n(l),p=e(208),h={};function f(){return JSON.parse(localStorage.getItem("tasks"))||[]}function g(){return JSON.parse(localStorage.getItem("projects"))||[]}function m(n){const t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new n.constructor(+n):"number"==typeof n||"[object Number]"===t||"string"==typeof n||"[object String]"===t?new Date(n):new Date(NaN)}function b(n){const t=m(n);return t.setHours(0,0,0,0),t}h.styleTagTransform=A(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),t()(p.A,h),p.A&&p.A.locals&&p.A.locals;let C={currentProject:"All"};function w(){return C}function x(n){C.currentProject=n,Dn(n)}function E(n){const t=((e=n).forEach(((n,t)=>{n.index=t})),e);var e;localStorage.setItem("tasks",JSON.stringify(t)),x(w().currentProject)}function y(n,t,e){const r=f();r[n][t]=e,E(r)}class k{constructor(n,t,e,r,a,o){this.title=n,this.description=t,this.dueDate=e,this.completionStatus=r,this.important=a,this.project=o,this.index=f().length,function(n){let t=JSON.parse(localStorage.getItem("tasks"))||[];t.push(n),localStorage.setItem("tasks",JSON.stringify(t))}(this)}}function B(n,t){return n instanceof Date?new n.constructor(t):new Date(t)}Math.pow(10,8);const I=6048e5,v=864e5,S=6e4,M=36e5;function D(n,t){return function(n,t){return B(n,+m(n)+t)}(n,t*M)}function T(n,t){n._changeEventListener&&n.removeEventListener("change",n._changeEventListener),n._changeEventListener=function(){const n=D(new Date(this.value),12);!function(n,t){y(n,"dueDate",t)}(t,n),function(n){const t=document.querySelector(`[data-index='${n}']`),e=w().currentProject;if(t){const e=f()[n],r=t.querySelector(".dueDate"),a=bn(function(n,t){const e=t?.additionalDigits??2,r=function(n){const t={},e=n.split(wn.dateTimeDelimiter);let r;if(e.length>2)return t;if(/:/.test(e[0])?r=e[0]:(t.date=e[0],r=e[1],wn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(wn.timeZoneDelimiter)[0],r=n.substr(t.date.length,n.length))),r){const n=wn.timezone.exec(r);n?(t.time=r.replace(n[1],""),t.timezone=n[1]):t.time=r}return t}(n);let a;if(r.date){const n=function(n,t){const e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=n.match(e);if(!r)return{year:NaN,restDateString:""};const a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:n.slice((r[1]||r[2]).length)}}(r.date,e);a=function(n,t){if(null===t)return new Date(NaN);const e=n.match(xn);if(!e)return new Date(NaN);const r=!!e[4],a=kn(e[1]),o=kn(e[2])-1,i=kn(e[3]),s=kn(e[4]),c=kn(e[5])-1;if(r)return function(n,t,e){return t>=1&&t<=53&&e>=0&&e<=6}(0,s,c)?function(n,t,e){const r=new Date(0);r.setUTCFullYear(n,0,4);const a=7*(t-1)+e+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,c):new Date(NaN);{const n=new Date(0);return function(n,t,e){return t>=0&&t<=11&&e>=1&&e<=(In[t]||(vn(n)?29:28))}(t,o,i)&&function(n,t){return t>=1&&t<=(vn(n)?366:365)}(t,a)?(n.setUTCFullYear(t,o,Math.max(a,i)),n):new Date(NaN)}}(n.restDateString,n.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);const o=a.getTime();let i,s=0;if(r.time&&(s=function(n){const t=n.match(En);if(!t)return NaN;const e=Bn(t[1]),r=Bn(t[2]),a=Bn(t[3]);return function(n,t,e){return 24===n?0===t&&0===e:e>=0&&e<60&&t>=0&&t<60&&n>=0&&n<25}(e,r,a)?e*M+r*S+1e3*a:NaN}(r.time),isNaN(s)))return new Date(NaN);if(!r.timezone){const n=new Date(o+s),t=new Date(0);return t.setFullYear(n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()),t.setHours(n.getUTCHours(),n.getUTCMinutes(),n.getUTCSeconds(),n.getUTCMilliseconds()),t}return i=function(n){if("Z"===n)return 0;const t=n.match(yn);if(!t)return 0;const e="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(n,t){return t>=0&&t<=59}(0,a)?e*(r*M+a*S):NaN}(r.timezone),isNaN(i)?new Date(NaN):new Date(o+s+i)}(e.dueDate),"yyyy-MM-dd");r.innerHTML=a}Dn(e)}(t)},n.addEventListener("change",n._changeEventListener)}function P(){addTaskInput.addEventListener("keypress",(n=>{const t=document.getElementById("addTaskInput"),e=w().currentProject;if("Enter"===n.key&&""!==t.value){const t=D(b(Date.now()),12),r=n.target.value;"All"==e||"today"==e?(new k(r,"description",t,!1,!1,""),Dn(e)):"important"==e?(new k(r,"description",t,!1,!0,""),Dn(e)):(new k(r,"description",t,!1,!1,e),Dn(e)),n.target.value=""}}))}document.addEventListener("DOMContentLoaded",(function(){document.addEventListener("click",(function(n){!function(n){const t=document.getElementById("taskEditPanel");!t.contains(n.target)&&t.classList.contains("open")&&t.classList.remove("open")}(n),function(n){const t=document.getElementById("projectsPanel");!t.contains(n.target)&&t.classList.contains("open")&&t.classList.remove("open")}(n)}))})),document.addEventListener("DOMContentLoaded",(function(){document.getElementById("hamburgerMenu").addEventListener("click",(n=>{!function(n){document.getElementById("projectsPanel").classList.add("open"),n.stopPropagation()}(n)}))})),function(){const n=document.getElementById("allTab");document.getElementById("projectsPanel"),n.addEventListener("click",(()=>{x("All")}))}(),document.getElementById("todayTab").addEventListener("click",(()=>{x("today")})),document.getElementById("importantTab").addEventListener("click",(()=>{x("important")})),function(){const n=document.getElementById("addProjectInput");n.addEventListener("keypress",(t=>{const e=g(),r=n.value;"Enter"===t.key&&""!=r&&(e.includes(r)||(function(n){let t=JSON.parse(localStorage.getItem("projects"))||[];t.push(n),localStorage.setItem("projects",JSON.stringify(t))}(r),Tn(),t.target.value=""))}))}(),e.p;const j={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function L(n){return(t={})=>{const e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const W={date:L({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:L({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:L({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},N={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(n){return(t,e)=>{let r;if("formatting"===(e?.context?String(e.context):"standalone")&&n.formattingValues){const t=n.defaultFormattingWidth||n.defaultWidth,a=e?.width?String(e.width):t;r=n.formattingValues[a]||n.formattingValues[t]}else{const t=n.defaultWidth,a=e?.width?String(e.width):n.defaultWidth;r=n.values[a]||n.values[t]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const z={ordinalNumber:(n,t)=>{const e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function O(n){return(t,e={})=>{const r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=t.match(a);if(!o)return null;const i=o[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,t){for(let t=0;t<n.length;t++)if(n[t].test(i))return t}(s):function(n,t){for(const t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&n[t].test(i))return t}(s);let d;return d=n.valueCallback?n.valueCallback(c):c,d=e.valueCallback?e.valueCallback(d):d,{value:d,rest:t.slice(i.length)}}}const q={ordinalNumber:(H={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,t={})=>{const e=n.match(H.matchPattern);if(!e)return null;const r=e[0],a=n.match(H.parsePattern);if(!a)return null;let o=H.valueCallback?H.valueCallback(a[0]):a[0];return o=t.valueCallback?t.valueCallback(o):o,{value:o,rest:n.slice(r.length)}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var H;const F={code:"en-US",formatDistance:(n,t,e)=>{let r;const a=j[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:W,formatRelative:(n,t,e,r)=>N[n],localize:z,match:q,options:{weekStartsOn:0,firstWeekContainsDate:1}};let X={};function U(){return X}function Q(n){const t=m(n),e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),+n-+e}function $(n){const t=m(n);return function(n,t){const e=b(n),r=b(t),a=+e-Q(e),o=+r-Q(r);return Math.round((a-o)/v)}(t,function(n){const t=m(n),e=B(n,0);return e.setFullYear(t.getFullYear(),0,1),e.setHours(0,0,0,0),e}(t))+1}function J(n,t){const e=U(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,a=m(n),o=a.getDay(),i=(o<r?7:0)+o-r;return a.setDate(a.getDate()-i),a.setHours(0,0,0,0),a}function R(n){return J(n,{weekStartsOn:1})}function Z(n){const t=m(n),e=t.getFullYear(),r=B(n,0);r.setFullYear(e+1,0,4),r.setHours(0,0,0,0);const a=R(r),o=B(n,0);o.setFullYear(e,0,4),o.setHours(0,0,0,0);const i=R(o);return t.getTime()>=a.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}function G(n){const t=m(n),e=+R(t)-+function(n){const t=Z(n),e=B(n,0);return e.setFullYear(t,0,4),e.setHours(0,0,0,0),R(e)}(t);return Math.round(e/I)+1}function _(n,t){const e=m(n),r=e.getFullYear(),a=U(),o=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=B(n,0);i.setFullYear(r+1,0,o),i.setHours(0,0,0,0);const s=J(i,t),c=B(n,0);c.setFullYear(r,0,o),c.setHours(0,0,0,0);const d=J(c,t);return e.getTime()>=s.getTime()?r+1:e.getTime()>=d.getTime()?r:r-1}function K(n,t){const e=m(n),r=+J(e,t)-+function(n,t){const e=U(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,a=_(n,t),o=B(n,0);return o.setFullYear(a,0,r),o.setHours(0,0,0,0),J(o,t)}(e,t);return Math.round(r/I)+1}function V(n,t){return(n<0?"-":"")+Math.abs(n).toString().padStart(t,"0")}const nn={y(n,t){const e=n.getFullYear(),r=e>0?e:1-e;return V("yy"===t?r%100:r,t.length)},M(n,t){const e=n.getMonth();return"M"===t?String(e+1):V(e+1,2)},d:(n,t)=>V(n.getDate(),t.length),a(n,t){const e=n.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(n,t)=>V(n.getHours()%12||12,t.length),H:(n,t)=>V(n.getHours(),t.length),m:(n,t)=>V(n.getMinutes(),t.length),s:(n,t)=>V(n.getSeconds(),t.length),S(n,t){const e=t.length,r=n.getMilliseconds();return V(Math.trunc(r*Math.pow(10,e-3)),t.length)}},tn={G:function(n,t,e){const r=n.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){const t=n.getFullYear(),r=t>0?t:1-t;return e.ordinalNumber(r,{unit:"year"})}return nn.y(n,t)},Y:function(n,t,e,r){const a=_(n,r),o=a>0?a:1-a;return"YY"===t?V(o%100,2):"Yo"===t?e.ordinalNumber(o,{unit:"year"}):V(o,t.length)},R:function(n,t){return V(Z(n),t.length)},u:function(n,t){return V(n.getFullYear(),t.length)},Q:function(n,t,e){const r=Math.ceil((n.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){const r=Math.ceil((n.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return V(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){const r=n.getMonth();switch(t){case"M":case"MM":return nn.M(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){const r=n.getMonth();switch(t){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){const a=K(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):V(a,t.length)},I:function(n,t,e){const r=G(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):V(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getDate(),{unit:"date"}):nn.d(n,t)},D:function(n,t,e){const r=$(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):V(r,t.length)},E:function(n,t,e){const r=n.getDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){const a=n.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return V(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){const a=n.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return V(o,t.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){const r=n.getDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return V(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){const r=n.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){const r=n.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,t,e){const r=n.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){let t=n.getHours()%12;return 0===t&&(t=12),e.ordinalNumber(t,{unit:"hour"})}return nn.h(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getHours(),{unit:"hour"}):nn.H(n,t)},K:function(n,t,e){const r=n.getHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},k:function(n,t,e){let r=n.getHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getMinutes(),{unit:"minute"}):nn.m(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getSeconds(),{unit:"second"}):nn.s(n,t)},S:function(n,t){return nn.S(n,t)},X:function(n,t,e){const r=n.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return rn(r);case"XXXX":case"XX":return an(r);default:return an(r,":")}},x:function(n,t,e){const r=n.getTimezoneOffset();switch(t){case"x":return rn(r);case"xxxx":case"xx":return an(r);default:return an(r,":")}},O:function(n,t,e){const r=n.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+en(r,":");default:return"GMT"+an(r,":")}},z:function(n,t,e){const r=n.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+en(r,":");default:return"GMT"+an(r,":")}},t:function(n,t,e){return V(Math.trunc(n.getTime()/1e3),t.length)},T:function(n,t,e){return V(n.getTime(),t.length)}};function en(n,t=""){const e=n>0?"-":"+",r=Math.abs(n),a=Math.trunc(r/60),o=r%60;return 0===o?e+String(a):e+String(a)+t+V(o,2)}function rn(n,t){return n%60==0?(n>0?"-":"+")+V(Math.abs(n)/60,2):an(n,t)}function an(n,t=""){const e=n>0?"-":"+",r=Math.abs(n);return e+V(Math.trunc(r/60),2)+t+V(r%60,2)}const on=(n,t)=>{switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},sn=(n,t)=>{switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},cn={p:sn,P:(n,t)=>{const e=n.match(/(P+)(p+)?/)||[],r=e[1],a=e[2];if(!a)return on(n,t);let o;switch(r){case"P":o=t.dateTime({width:"short"});break;case"PP":o=t.dateTime({width:"medium"});break;case"PPP":o=t.dateTime({width:"long"});break;default:o=t.dateTime({width:"full"})}return o.replace("{{date}}",on(r,t)).replace("{{time}}",sn(a,t))}},dn=/^D+$/,un=/^Y+$/,ln=["D","DD","YY","YYYY"];function An(n){if(!(t=n,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof n))return!1;var t;const e=m(n);return!isNaN(Number(e))}const pn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,hn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fn=/^'([^]*?)'?$/,gn=/''/g,mn=/[a-zA-Z]/;function bn(n,t,e){const r=U(),a=e?.locale??r.locale??F,o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=m(n);if(!An(s))throw new RangeError("Invalid time value");let c=t.match(hn).map((n=>{const t=n[0];return"p"===t||"P"===t?(0,cn[t])(n,a.formatLong):n})).join("").match(pn).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const t=n[0];if("'"===t)return{isToken:!1,value:Cn(n)};if(tn[t])return{isToken:!0,value:n};if(t.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:n}}));a.localize.preprocessor&&(c=a.localize.preprocessor(s,c));const d={firstWeekContainsDate:o,weekStartsOn:i,locale:a};return c.map((r=>{if(!r.isToken)return r.value;const o=r.value;return(!e?.useAdditionalWeekYearTokens&&function(n){return un.test(n)}(o)||!e?.useAdditionalDayOfYearTokens&&function(n){return dn.test(n)}(o))&&function(n,t,e){const r=function(n,t,e){const r="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${t}\`) for formatting ${r} to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,t,e);if(console.warn(r),ln.includes(n))throw new RangeError(r)}(o,t,String(n)),(0,tn[o[0]])(s,o,a.localize,d)})).join("")}function Cn(n){const t=n.match(fn);return t?t[1].replace(gn,"'"):n}const wn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},xn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,En=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,yn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function kn(n){return n?parseInt(n):1}function Bn(n){return n&&parseFloat(n.replace(",","."))||0}const In=[31,null,31,30,31,30,31,31,30,31,30,31];function vn(n){return n%400==0||n%4==0&&n%100!=0}const Sn=e.p+"dd54fc8737dc8f0276e8.svg",Mn=document.getElementById("hamburgerMenu");function Dn(n){const t=function(n){const t=f();if("All"==n)return t;if("today"==n){const n=new Date;return t.filter((t=>{return e=t.dueDate,r=n,+b(e)==+b(r);var e,r}))}return"important"==n?t.filter((n=>1==n.important)):t.filter((t=>t.project==n))}(n);document.getElementById("currentTasks").innerHTML="",function(){const n=document.getElementById("currentTasks"),t=document.createElement("h2");t.innerHTML=w().currentProject,t.id="projectName",n.appendChild(t);const e=document.createElement("p");e.id="currentDate",e.innerHTML=bn(new Date,"EEEE, LLL do yyyy"),n.appendChild(e)}(),t.forEach((n=>function(n){const t=document.getElementById("currentTasks"),e=document.createElement("div");e.classList.add("taskCard"),e.setAttribute("data-index",n.index),function(n){n.addEventListener("click",(t=>{const e=n.getAttribute("data-index");Pn(e,t)}))}(e);const r=document.createElement("input");r.type="checkbox",r.classList.add("completionStatus"),r.checked=n.completionStatus,e.appendChild(r);const a=document.createElement("label");a.for="completionStatus",e.appendChild(a),1==n.completionStatus?e.classList.add("grayed-out-text"):0==n.completionStatus&&e.classList.remove("grayed-out-text"),function(n){n.addEventListener("click",(()=>{!function(n){const t=f();t[n].completionStatus=!t[n].completionStatus,E(t)}(n.closest(".taskCard").getAttribute("data-index"))}))}(r);const o=document.createElement("h5");o.classList.add("title"),o.innerHTML=n.title,e.appendChild(o);const i=document.createElement("p");i.classList.add("projectLabel"),i.innerHTML=n.project,e.appendChild(i);const s=document.createElement("p");s.classList.add("dueDate"),console.log(n.dueDate),s.innerHTML="Due: "+bn(n.dueDate,"EEEE, LLL do"),e.appendChild(s),n.important&&e.classList.add("important"),t.appendChild(e)}(n))),function(){const n=document.createElement("div");n.id="addTaskDiv";const t=document.createElement("input");t.id="addTaskInput",t.type="text",t.placeholder="Add a task";const e=document.getElementById("currentTasks");n.appendChild(t),e.appendChild(n),P()}()}function Tn(){const n=g();document.getElementById("projectsContainer").innerHTML="",n.forEach((n=>function(n){const t=document.getElementById("projectsContainer"),e=document.createElement("div");e.classList.add("projectCard"),e.innerHTML=n,function(n){n.addEventListener("click",(()=>{x(n.innerHTML)}))}(e),t.appendChild(e)}(n)))}Mn.src=Sn,Mn.alt="hamburger menu";const Pn=(n,t)=>{const e=f()[n],r=bn(new Date(e.dueDate),"yyyy-MM-dd"),a=document.getElementById("editDueDate"),o=document.getElementById("editImportance"),i=document.getElementById("taskToEdit"),s=document.getElementById("deleteBtn");i.value=e.title||"",o.checked=e.important,function(n,t){n._importantClickListener&&n.removeEventListener("click",n._importantClickListener),n._importantClickListener=()=>{!function(n){const t=f();t[n].important=!t[n].important,E(t)}(t),x(w().currentProject)},n.addEventListener("click",n._importantClickListener)}(o,n),T(a,n),function(n,t){t.onblur=null,t.onblur=()=>function(n,t){!function(n,t){y(n,"title",t)}(n,t.value),x(w().currentProject)}(n,t)}(n,i),function(n,t){n._currentDeleteListener&&n.removeEventListener("click",n._currentDeleteListener),n._currentDeleteListener=()=>function(n){!function(n){const t=f(),e=Number(n);E(t.filter((n=>n.index!==e)))}(n)}(t),n.addEventListener("click",n._currentDeleteListener)}(s,n),a.value=r,document.getElementById("taskEditPanel").classList.add("open"),t.stopPropagation()};Dn("All"),Tn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,